function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import IndexedDB from 'indexeddb-tools';

var IndexedDBRedux =
/*#__PURE__*/
function () {
  /**
   * 初始化数据库信息，需要传入数据库名称和版本号
   * @param name
   * @param version
   */
  function IndexedDBRedux(name, version) {
    _classCallCheck(this, IndexedDBRedux);

    this.name = name;
    this.version = version;
  }
  /**
   * 获取数据
   * @param { string } objectStoreName: ObjectStore名字
   * @param { Function } successAction: 获取数据成功的Action
   * @param { Function } failAction   : 获取数据失败的Action
   */


  _createClass(IndexedDBRedux, [{
    key: "getAction",
    value: function getAction(_ref) {
      var _this2 = this;

      var objectStoreName = _ref.objectStoreName,
          successAction = _ref.successAction,
          failAction = _ref.failAction;
      return function (arg) {
        // arg.query作为查询条件
        var query = arg.query;
        return function (dispatch, getState) {
          return new Promise(function (resolve, reject) {
            IndexedDB(_this2.name, _this2.version, {
              success: function success(event) {
                var _this = this;

                var store = this.getObjectStore(objectStoreName);
                store.get(query, function (event) {
                  // 此处将result作为获取结果
                  var res = _extends({}, arg, {
                    result: event.target.result
                  });

                  if (successAction) {
                    dispatch(successAction(res)); // 会将传递的数据 + result作为结果继续传递下去
                  }

                  resolve(res);

                  _this.close();
                });
              }
            });
          }).catch(function (err) {
            console.error('getAction', err);

            if (failAction) {
              dispatch(failAction(arg));
            }
          });
        };
      };
    }
    /**
     * @param { string } objectStoreName: ObjectStore名字
     * @param { Function } successAction: 添加数据成功的Action
     * @param { Function } failAction   : 添加数据失败的Action
     */

  }, {
    key: "addAction",
    value: function addAction(_ref2) {
      var _this3 = this;

      var objectStoreName = _ref2.objectStoreName,
          successAction = _ref2.successAction,
          failAction = _ref2.failAction;
      return function (arg) {
        // arg.data作为添加数据条件
        var data = arg.data;
        return function (dispatch, getState) {
          return new Promise(function (resolve, reject) {
            IndexedDB(_this3.name, _this3.version, {
              success: function success(event) {
                var store = this.getObjectStore(objectStoreName, true);
                store.add(data);

                if (successAction) {
                  dispatch(successAction(arg));
                }

                resolve(arg);
                this.close();
              }
            });
          }).catch(function (err) {
            console.error(err);

            if (failAction) {
              dispatch(failAction(arg));
            }
          });
        };
      };
    }
    /**
     * 更新数据
     * @param { string } objectStoreName: ObjectStore名字
     * @param { Function } successAction: 更新数据成功的Action
     * @param { Function } failAction   : 更新数据失败的Action
     */

  }, {
    key: "putAction",
    value: function putAction(_ref3) {
      var _this4 = this;

      var objectStoreName = _ref3.objectStoreName,
          successAction = _ref3.successAction,
          failAction = _ref3.failAction;
      return function (arg) {
        // arg.data作为更新数据条件
        var data = arg.data;
        return function (dispatch, getState) {
          return new Promise(function (resolve, reject) {
            IndexedDB(_this4.name, _this4.version, {
              success: function success(event) {
                var store = this.getObjectStore(objectStoreName, true);
                store.put(data);

                if (successAction) {
                  dispatch(successAction(arg));
                }

                resolve(arg);
                this.close();
              }
            });
          }).catch(function (err) {
            console.error(err);

            if (failAction) {
              dispatch(failAction(arg));
            }
          });
        };
      };
    }
    /**
     * 删除数据
     * @param { string } objectStoreName: ObjectStore名字
     * @param { Function } successAction: 删除数据成功的Action
     * @param { Function } failAction   : 删除数据失败的Action
     */

  }, {
    key: "deleteAction",
    value: function deleteAction(_ref4) {
      var _this5 = this;

      var objectStoreName = _ref4.objectStoreName,
          successAction = _ref4.successAction,
          failAction = _ref4.failAction;
      return function (arg) {
        // arg.query作为删除数据条件
        var query = arg.query;
        return function (dispatch, getState) {
          return new Promise(function (resolve, reject) {
            IndexedDB(_this5.name, _this5.version, {
              success: function success(event) {
                var store = this.getObjectStore(objectStoreName, true);
                store.delete(query);

                if (successAction) {
                  dispatch(successAction(arg));
                }

                resolve(arg);
                this.close();
              }
            });
          }).catch(function (err) {
            console.error(err);

            if (failAction) {
              dispatch(failAction(arg));
            }
          });
        };
      };
    }
    /**
     * 清除数据
     * @param { string } objectStoreName: ObjectStore名字
     * @param { Function } successAction: 删除数据成功的Action
     * @param { Function } failAction   : 删除数据失败的Action
     */

  }, {
    key: "clearAction",
    value: function clearAction(_ref5) {
      var _this6 = this;

      var objectStoreName = _ref5.objectStoreName,
          successAction = _ref5.successAction,
          failAction = _ref5.failAction;
      return function (arg) {
        return function (dispatch, getState) {
          return new Promise(function (resolve, reject) {
            IndexedDB(_this6.name, _this6.version, {
              success: function success(event) {
                var store = this.getObjectStore(objectStoreName, true);
                store.clear();

                if (successAction) {
                  dispatch(successAction(arg));
                }

                resolve(arg);
                this.close();
              }
            });
          }).catch(function (err) {
            console.error(err);

            if (failAction) {
              dispatch(failAction(arg));
            }
          });
        };
      };
    }
    /**
     * 根据游标查询数据
     * @param { string } objectStoreName: ObjectStore名字
     * @param { Function } successAction: 删除数据成功的Action
     * @param { Function } failAction   : 删除数据失败的Action
     */

  }, {
    key: "cursorAction",
    value: function cursorAction(_ref6) {
      var _this7 = this;

      var objectStoreName = _ref6.objectStoreName,
          successAction = _ref6.successAction,
          failAction = _ref6.failAction;
      return function (arg) {
        /**
         * arg.query作为查询数据条件
         * arg.query.indexName: 要查询的索引
         * arg.query.range    : 游标范围
         */
        var _arg$query = arg.query,
            indexName = _arg$query.indexName,
            range = _arg$query.range;
        return function (dispatch, getState) {
          return new Promise(function (resolve, reject) {
            IndexedDB(_this7.name, _this7.version, {
              success: function success(event) {
                var _this = this;

                var store = this.getObjectStore(objectStoreName);
                var arg = [indexName];
                if (range) arg.push(range);
                var resArr = [];
                store.cursor.apply(store, arg.concat([function (event) {
                  var result = event.target.result;

                  if (result) {
                    resArr.push(result.value);
                    result.continue();
                  } else {
                    // 此处将result作为获取结果
                    var res = _extends({}, arg, {
                      result: resArr
                    });

                    if (successAction) {
                      dispatch(successAction(res));
                    }

                    resolve(res);

                    _this.close();
                  }
                }]));
              }
            });
          }).catch(function (err) {
            console.error(err);

            if (failAction) {
              dispatch(failAction(arg));
            }
          });
        };
      };
    }
  }]);

  return IndexedDBRedux;
}();

export default IndexedDBRedux;