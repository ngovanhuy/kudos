function _sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return _sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }

/**
 * 获取IDBKeyRange
 * 根据字符串返回游标查询的范围，例如：
 * '5'      等于rollup
 * '>  5'   大于
 * '>= 5'   大于等于
 * '<  5'   小于
 * '<= 5'   小于等于
 * '[5, 8]' 闭区间
 * '(5, 8)' 开区间
 * @param { string } range: 传递字符串
 * @return
 */
function getRange(range) {
  if (typeof range === 'number') {
    return range;
  } else if (typeof range === 'string') {
    // 对字符串进行判断
    // 大于
    if (/^\s*>\s*(-?\d+(\.\d+)?)\s*$/i.test(range)) {
      return IDBKeyRange.lowerBound(Number(range.match(/(-?\d+(\.\d+)?)/g)[0]), true);
    } // 大于等于


    if (/^\s*>\s*=\s*(-?\d+(\.\d+)?)\s*$/i.test(range)) {
      return IDBKeyRange.lowerBound(Number(range.match(/(-?\d+(\.\d+)?)/g)[0]));
    } // 小于


    if (/^\s*<\s*(-?\d+(\.\d+)?)\s*$/i.test(range)) {
      return IDBKeyRange.upperBound(Number(range.match(/(-?\d+(\.\d+)?)/g)[0]), true);
    } // 小于等于


    if (/^\s*<\s*=\s*(-?\d+(\.\d+)?)\s*$/i.test(range)) {
      return IDBKeyRange.upperBound(Number(range.match(/(-?\d+(\.\d+)?)/g)[0]));
    } // 判断区间


    if (/^\s*[\[\(]\s*(-?\d+(\.\d+)?)\s*\,\s*(-?\d+(\.\d+)?)\s*[\]\)]\s*$/i.test(range)) {
      var _range$match = range.match(/(-?\d+(\.\d+)?)/g),
          _range$match2 = _slicedToArray(_range$match, 2),
          v0 = _range$match2[0],
          v1 = _range$match2[1];

      var isOpen0 = false,
          isOpen1 = false; // 判断左右开区间和闭区间

      if (/^.*\(.*$/.test(range)) {
        isOpen0 = true;
      }

      if (/^.*\).*$/.test(range)) {
        isOpen1 = true;
      }

      return IDBKeyRange.bound(Number(v0), Number(v1), isOpen0, isOpen1);
    }

    return range;
  }
}

export default getRange;