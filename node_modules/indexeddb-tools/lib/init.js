function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import ObjectStore from './objectStore';
/* 初始化数据库 */

var Init =
/*#__PURE__*/
function () {
  function Init(indexeddb, name, version, callbackObject) {
    _classCallCheck(this, Init);

    this.indexeddb = indexeddb; // 数据库实例

    this.name = name; // 数据库名称

    this.version = version; // 版本号

    this.callbackObject = callbackObject; // 回调函数

    this.db = null; // db实例
    // 创建或者打开数据库

    this.request = this.indexeddb.open(name, version); // 绑定函数

    this.request.addEventListener('success', this.openSuccess.bind(this), false);
    this.request.addEventListener('error', this.openError.bind(this), false);
    this.request.addEventListener('upgradeneeded', this.openUpgradeneeded.bind(this), false);
  }
  /* 打开数据库成功 */


  _createClass(Init, [{
    key: "openSuccess",
    value: function openSuccess(event) {
      if (this.callbackObject.success) {
        this.db = event.target.result;
        this.callbackObject.success.call(this, event);
      }

      console.log("\u6253\u5F00\u6570\u636E\u5E93\u6210\u529F\uFF01\nname:    ".concat(this.name, "\nversion: ").concat(this.version));
    }
    /* 打开数据库失败 */

  }, {
    key: "openError",
    value: function openError(event) {
      if (this.callbackObject.error) {
        console.error(event.target.error.message);
        this.callbackObject.error.call(this, event); // event.target.error
      }

      console.log("\u6253\u5F00\u6570\u636E\u5E93\u5931\u8D25\uFF01\nname:    ".concat(this.name, "\nversion: ").concat(this.version));
    }
    /* 更新数据库版本 */

  }, {
    key: "openUpgradeneeded",
    value: function openUpgradeneeded(event) {
      if (this.callbackObject.upgradeneeded) {
        this.db = event.target.result;
        this.callbackObject.upgradeneeded.call(this, event);
      }

      console.log("\u6570\u636E\u5E93\u7248\u672C\u66F4\u65B0\uFF01\nname:    ".concat(this.name, "\nversion: ").concat(this.version));
    }
    /* 关闭数据库 */

  }, {
    key: "close",
    value: function close() {
      this.db.close();
      this.db = null;
      console.log("\u6570\u636E\u5E93\u5173\u95ED\u3002\nname:    ".concat(this.name, "\nversion: ").concat(this.version));
    }
    /**
     * 判断是否有ObjectStore
     * @param { string } objectStoreName: ObjectStore名字
     * @return { boolean }
     */

  }, {
    key: "hasObjectStore",
    value: function hasObjectStore(objectStoreName) {
      return this.db.objectStoreNames.contains(objectStoreName);
    }
    /**
     * 创建ObjectStore
     * @param { string } objectStoreName: ObjectStore名字
     * @param { string } keyPath        : ObjectStore关键字
     * @param { Array } indexArray      : 添加索引和键值，name -> 索引， age -> 键值
     * @return { this }
     */

  }, {
    key: "createObjectStore",
    value: function createObjectStore(objectStoreName, keyPath, indexArray) {
      if (!this.hasObjectStore(objectStoreName)) {
        var store = this.db.createObjectStore(objectStoreName, {
          keyPath: keyPath
        }); // 创建索引键值

        if (indexArray) {
          for (var i = 0, j = indexArray.length; i < j; i++) {
            store.createIndex(indexArray[i].name, // 索引
            indexArray[i].index // 键值
            );
          }
        }

        console.log("\u521B\u5EFA\u4E86\u65B0\u7684ObjectStore\uFF1A".concat(objectStoreName, "\u3002"));
      } else {
        console.warn("ObjectStore\uFF1A".concat(objectStoreName, "\u5DF2\u5B58\u5728\u3002"));
      }

      return this;
    }
    /**
     * 删除ObjectStore
     * @param { string } objectStoreName: ObjectStore名字
     * @return { this }
     */

  }, {
    key: "deleteObjectStore",
    value: function deleteObjectStore(objectStoreName) {
      if (this.hasObjectStore(objectStoreName)) {
        this.db.deleteObjectStore(objectStoreName);
        console.log("\u5220\u9664\u4E86\u65B0\u7684ObjectStore\uFF1A".concat(objectStoreName, "\u3002"));
      } else {
        console.warn("ObjectStore\uFF1A".concat(objectStoreName, "\u4E0D\u5B58\u5728\u3002"));
      }

      return this;
    }
  }, {
    key: "getObjectStore",

    /**
     * 获取操作ObjectStore
     * @param { string } objectStoreName: ObjectStore名字
     * @param { boolean } writeAble     : 只读还是读写
     * @return { ObjectStore }
     */
    value: function getObjectStore(objectStoreName) {
      var writeAble = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return new ObjectStore(this.db, objectStoreName, writeAble);
    }
  }]);

  return Init;
}();

export default Init;