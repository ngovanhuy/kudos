function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import getRange from './getRange';
/**
 * 操作objectStore
 * @param { Object } db            : db实例
 * @param { string } objectStoreNam: objectStore名字
 * @param { boolean } writeAble    : 是否只读
 */

var ObjectStore =
/*#__PURE__*/
function () {
  function ObjectStore(db, objectStoreName, writeAble) {
    _classCallCheck(this, ObjectStore);

    this.db = db;
    var wa = writeAble === true ? 'readwrite' : 'readonly';
    var transaction = this.db.transaction(objectStoreName, wa);
    this.store = transaction.objectStore(objectStoreName);
    return this;
  }
  /**
   * 添加数据
   * @param { Object | Array } arg: 数组添加多个数据，object添加单个数据
   * @return { this }
   */


  _createClass(ObjectStore, [{
    key: "add",
    value: function add(arg) {
      var data = arg instanceof Array ? arg : [arg];

      for (var i = 0, j = data.length - 1; i <= j; i++) {
        this.store.add(data[i]);

        if (i === j) {
          console.log('数据添加成功');
        }
      }

      return this;
    }
    /**
     * 更新数据
     * @param { Object | Array } arg: 数组添加多个数据，object添加单个数据
     * @return { this }
     */

  }, {
    key: "put",
    value: function put(arg) {
      var data = arg instanceof Array ? arg : [arg];

      for (var i = 0, j = data.length - 1; i <= j; i++) {
        this.store.put(data[i]);

        if (i === j) {
          console.log('数据更新成功');
        }
      }

      return this;
    }
    /**
     * 删除数据
     * @param { string | number | Array } arg: 数组删除多个数据，string、number删除单个数据
     * @return this
     */

  }, {
    key: "delete",
    value: function _delete(arg) {
      var data = arg instanceof Array ? arg : [arg];

      for (var i = 0, j = data.length - 1; i <= j; i++) {
        this.store.delete(data[i]);

        if (i === j) {
          console.log('数据删除成功');
        }
      }

      return this;
    }
  }, {
    key: "clear",

    /* 清除数据 */
    value: function clear() {
      this.store.clear();
      console.log('数据清除成功');
      return this;
    }
  }, {
    key: "get",

    /**
     * 获取数据
     * @param { string | number} value: 键值
     * @param { Function } callback   : 获取成功的回调函数
     * @return { this }
     */
    value: function get(value, callback) {
      var _this = this;

      var g = this.store.get(value);

      var success = function success(event) {
        if (callback) callback.call(_this, event); // event.target.result
      };

      g.addEventListener('success', success, false);
      return this;
    }
    /**
     * 游标
     * @param { string } indexName               : 索引名
     * @param { string | number | boolean } range: 查询范围：有等于，大于等于，小于，小于等于，区间
     * @param { Function } callback              : 查询成功的回调函数
     * @return { this }
     * result.value
     * result.continue()
     */

  }, {
    key: "cursor",
    value: function cursor(indexName) {
      var _this2 = this;

      var callback = typeof arguments[1] === 'function' ? arguments[1] : arguments[2];
      var index = this.store.index(indexName);
      var range = arguments[2] ? getRange(arguments[1]) : null;
      var cursor = range === null ? index.openCursor() : index.openCursor(range);

      var success = function success(event) {
        if (callback) callback.call(_this2, event); // event.target.result.value && event.target.result.continue()
      };

      cursor.addEventListener('success', success, false);
      return this;
    }
  }]);

  return ObjectStore;
}();

export default ObjectStore;